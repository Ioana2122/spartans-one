{"version":3,"sources":["components/Header.jsx","components/Athlete.jsx","components/AddAthleteModal.jsx","components/Main.jsx","components/Footer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Header","Navbar","bg","variant","expand","Brand","href","alt","src","width","height","className","Toggle","aria-controls","Collapse","id","Nav","Link","Component","athletesAPI","buttonText","Athlete","deleteAthlete","event","athleteID","target","console","log","fetch","method","then","res","json","answer","error","updateRecords","e","elements","document","getElementById","props","info","_id","getElementsByClassName","innerText","Object","keys","map","key","disabled","newScore","name","value","JSON","stringify","this","age","sex","email","photo","personalBest","Card","Accordion","as","eventKey","style","fontSize","Body","Img","Image","maxHeight","objectFit","Title","Text","display","ListGroup","padding","index","Item","Form","Row","Col","Label","textTransform","Control","type","defaultValue","ButtonGroup","size","aria-label","Button","onClick","AddAthleteModal","onChangeFileHandler","setState","selectedFile","files","loaded","handleSubmit","form","currentTarget","checkValidity","preventDefault","stopPropagation","isValidated","formPersonalBest","personalScore","i","length","placeholder","formData","FormData","append","formName","formEmail","formAge","formGender","state","body","response","Modal","aria-labelledby","centered","closeButton","noValidate","validated","onSubmit","Group","controlId","column","sm","required","Feedback","Check","label","lg","onChange","span","offset","Main","modalShow","showModal","bind","hideModal","athletes","athlete","paddingBottom","borderRadius","position","bottom","right","show","onHide","footerStyle","left","background","color","Footer","App","data","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5d67c0a5.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\n\n\nexport default class Header extends Component {\n  render(){\n    return(\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n            <Navbar.Brand href=\"#home\">\n                <img\n                    alt=\"\"\n                    src=\"/logo.svg\"\n                    width=\"30\"\n                    height=\"30\"\n                    className=\"d-inline-block align-top\"\n                />{' '}| Spartans\n            </Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <Nav.Link href=\"#home\">Home</Nav.Link>\n                    <Nav.Link href=\"#link\">Link</Nav.Link>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    )\n  }\n}","import React, {Component, Fragment} from 'react';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport Image from 'react-bootstrap/Image'\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport Form from 'react-bootstrap/Form'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nconst athletesAPI = 'https://theboxathletes.herokuapp.com/athletes/'\n\nconst buttonText = ['Edit Records', 'Update Records']\n\n\nexport default class Athlete extends Component {\n\n    deleteAthlete =(event)=>{\n        const athleteID = event.target.id\n        console.log(athleteID)\n        fetch(athletesAPI+athleteID, {\n            method: 'DELETE'\n        }).then(res=>res.json()).then((answer)=>{console.log(answer)},(error)=>console.log(error))\n        \n        // re-render here !!!\n    }\n\n    updateRecords =(e)=>{\n        // first, target the scores for current id, and select all scores\n        const elements = document.getElementById('scores-'+this.props.info._id).getElementsByClassName('scores-best form-control')\n        if (e.target.innerText === buttonText[0]) {\n            // remove 'disabled' attribute\n            Object.keys(elements).map(key=> elements[key].disabled = false)\n            \n            // change button text:\n            e.target.innerText = buttonText[1]\n        } else {\n            // initialize a new object\n            const newScore = {}\n            // add new scores to the newScore object\n            Object.keys(elements).map(key=> newScore[elements[key].name] = elements[key].value)\n            // stringify the object\n            console.log(JSON.stringify(newScore))\n\n            // HERE A NEW ENDPOINT ON BACKEND WOULD BE GREAT, SO WE CAN UPDATE THE SCORES ONLY ! \n            // fetch()\n\n            // disable input fields\n            Object.keys(elements).map(key=> elements[key].disabled = true)\n            // change button text back to \"Edit Records\"\n            e.target.innerText = buttonText[0]\n        }\n\n\n\n    }\n\n    render(){\n\n        const { name, age, sex, email, photo, _id, personalBest } = this.props.info;\n\n        return(\n            <Fragment>\n                <Card key={_id} className=\"rounded-0\">\n                    <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey={_id}>\n                        <span style={{fontSize: '1.5rem'}}>{name}</span>\n                    </Accordion.Toggle>\n                    <Accordion.Collapse eventKey={_id}>\n                    <Card.Body>\n                        <Card.Img as={Image} src={photo} style={{maxHeight : 300, objectFit: \"contain\" }}/>\n\n                        <Card.Title as={'h3'}>{name}</Card.Title>\n    \n                        <Card.Text>\n                            <small className=\"text-muted\">{email}</small>\n                            <span style={{display: 'block'}}> Age: {age} | Sex: {sex}</span>         \n                        </Card.Text>\n                        <ListGroup variant=\"flush\" style={{padding: \"1rem 0\"}} id={\"scores-\" + _id}>\n                                { Object.keys(personalBest).map((key, index)=> \n                                        <ListGroup.Item as={Form} key={index}>\n                                            <Row>\n                                                <Col>\n                                                    <Form.Label><span style={{textTransform: \"capitalize\"}}>{key}</span></Form.Label> \n                                                </Col>\n                                                <Col>\n                                                    <Form.Control \n                                                        disabled={true}\n                                                        type=\"number\"\n                                                        className=\"scores-best\"\n                                                        name={key}\n                                                        defaultValue={personalBest[key]}\n                                                    />\n                                                </Col>\n                                            </Row>\n                                        </ListGroup.Item> \n                                        )}\n                            </ListGroup>\n\n \n\n                        <ButtonGroup size=\"sm\" aria-label=\"Action Buttons\">\n                            <Button variant=\"success\" onClick={this.updateRecords}>{buttonText[0]}</Button>\n                            <Button variant=\"warning\">Edit Athlete</Button>\n                            <Button variant=\"danger\" onClick={this.deleteAthlete} id={_id}>Detele Athlete</Button>\n                        </ButtonGroup>\n\n\n                        \n                    </Card.Body>\n                    </Accordion.Collapse>\n                </Card>\n            </Fragment>\n        )\n    }\n}","import React, { Component } from 'react'\nimport Modal from 'react-bootstrap/Modal'\nimport Button from 'react-bootstrap/Button'\nimport Form from 'react-bootstrap/Form'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\n\nconst athletesAPI = 'https://theboxathletes.herokuapp.com/athletes/'\n\n\n\nexport default class AddAthleteModal extends Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            isValidated: false, \n            selectedFile: null\n        }\n    }\n\n    onChangeFileHandler=(event)=>{\n        this.setState({\n            selectedFile: event.target.files[0],\n            loaded:0\n        })\n        console.log(event.target.files[0])\n    }\n\n\n    handleSubmit =(event)=>{\n        const form = event.currentTarget\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        } else {\n            this.setState({\n                isValidated: true\n            })\n            console.log(\"Form validated and submitted\")\n\n            \n            const personalBest = form.formPersonalBest\n            const personalScore = {}\n            for(let i = 0 ; i < personalBest.length; i++){\n                personalScore[personalBest[i].placeholder] = personalBest[i].value\n            }\n\n            const formData = new FormData()\n            formData.append('name', form.formName.value)\n            formData.append('email', form.formEmail.value)\n            formData.append('age', form.formAge.value)\n            formData.append('sex', form.formGender.value)\n            formData.append('personalBest', JSON.stringify(personalScore))\n            formData.append('photo', this.state.selectedFile)\n\n            console.log(formData)\n\n            fetch(athletesAPI, {\n                method: 'POST',\n                body: formData\n            }).then((response)=>{console.log(response.json())},\n            (error)=>{console.log(error)})\n\n        }\n\n        event.preventDefault()\n        console.log(\"Submitting attempt: isValidated is \" + this.state.isValidated)\n\n        \n    }\n\n\n    render(){\n        return (\n            <Modal\n            {...this.props}\n            size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n            >\n            <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                Add new Athlete\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n            {/* FORM STARTS HERE */}\n                <Form noValidate validated={this.state.isValidated} onSubmit={this.handleSubmit}>\n            {/* NAME */}\n                    <Form.Group as={Row} controlId=\"formName\">\n                        <Form.Label column sm={2}>Name</Form.Label>\n                        <Col sm={10}>\n                            <Form.Control required type=\"text\" placeholder=\"Athlete's name\" />\n                        </Col>\n                    </Form.Group>\n            {/* EMAIL ADDRESS */}\n                    <Form.Group as={Row} controlId=\"formEmail\">\n                        <Form.Label column sm={2}>Email</Form.Label>\n                        <Col sm={10}>\n                            <Form.Control required type=\"email\" placeholder=\"Enter email\" />\n                            <Form.Text className=\"text-muted\">\n                                We'll never share your email with anyone else.\n                            </Form.Text>\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please provide a valid email.\n                            </Form.Control.Feedback>\n                        </Col>\n                    </Form.Group>\n            {/* AGE SELECTION */}\n                    <Form.Group as={Row} controlId=\"formAge\">\n                        <Form.Label column sm={2}>Age</Form.Label>\n                        <Col sm={10}>               \n                            <Form.Control required type=\"number\" placeholder=\"Enter age\" />\n                        </Col>\n                    </Form.Group>\n            {/* GENDER SELECTION */}\n                    <fieldset>\n                        <Form.Group as={Row} controlId=\"formGender\">\n                            <Form.Label as=\"legend\" column sm={2}>\n                                Sex\n                            </Form.Label>\n                            <Col sm={10}>\n                                <Form.Check type=\"radio\" label=\"M\" value=\"M\" name=\"gender\"  />\n                                <Form.Check type=\"radio\" label=\"F\" value=\"F\" name=\"gender\" />\n                            </Col>\n                        </Form.Group>\n                    </fieldset>\n            {/* PERSONAL BEST SCORE */}\n                    <Form.Group as={Row} controlId=\"formPersonalBest\">\n                        <Form.Label column lg={12}>\n                                Personal Best\n                        </Form.Label>\n                        <Col sm={3}>\n                            <Form.Control size=\"sm\" type=\"number\" placeholder=\"Benchpress\" />\n                        </Col>\n                        <Col sm={3}>\n                            <Form.Control size=\"sm\" type=\"number\" placeholder=\"Strictpress\" />\n                        </Col>\n                        <Col sm={3}>\n                            <Form.Control size=\"sm\" type=\"number\" placeholder=\"Pushpress\" />\n                        </Col>\n                        <Col sm={3}>\n                            <Form.Control size=\"sm\" type=\"number\" placeholder=\"Row\" />\n                        </Col>\n                        <Col sm={3}>\n                            <Form.Control size=\"sm\" type=\"number\" placeholder=\"Backsquat\" />\n                        </Col>\n                        <Col sm={3}>\n                            <Form.Control size=\"sm\" type=\"number\" placeholder=\"Frontsquat\" />\n                        </Col>\n                        <Col sm={3}>\n                            <Form.Control size=\"sm\" type=\"number\" placeholder=\"Deadlift\" />\n                        </Col>\n                        <Col sm={3}>\n                            <Form.Control size=\"sm\" type=\"number\" placeholder=\"Trapbardeadlift\" />\n                        </Col>\n                    </Form.Group>\n            {/* PHOTO UPLOAD */}\n                    <Form.Group as={Row} controlId=\"formPhoto\">\n                        <Form.Label column sm={2}>Photo</Form.Label>\n                        <Col sm={10}>\n                            <Form.Control required type=\"file\" onChange={this.onChangeFileHandler}/>\n                        </Col>\n                    </Form.Group>\n            {/* SUBMIT BUTTON */}\n                    <Form.Group as={Row}>\n                        <Col sm={{ span: 10, offset: 2 }}>\n                            <Button variant=\"success\" type=\"submit\">\n                                Submit\n                            </Button>\n                        </Col>\n                    </Form.Group>\n                </Form>\n            {/* FORM ENDED RIGHT ABOVE */}\n            </Modal.Body>\n            {/* OPTIONAL FOOTER - UNCOMMENT BELOW TO DISPLAY */}\n            {/* <Modal.Footer>\n                <Button variant=\"danger\" size=\"sm\" onClick={this.onHide}>Cancel</Button>\n            </Modal.Footer> */}\n            </Modal>\n        );\n        }\n}","import React, { Component, Fragment } from 'react'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Athlete from './Athlete.jsx'\nimport AddAthleteModal from './AddAthleteModal.jsx'\nimport Button from 'react-bootstrap/Button'\n\n\nexport default class Main extends Component {\n\n  constructor(){\n    super()\n    this.state = {\n      modalShow: false\n    }\n    this.showModal = this.showModal.bind(this)\n    this.hideModal = this.hideModal.bind(this)\n  }\n\n  showModal(){\n    this.setState({\n      modalShow: true\n    })\n  }\n\n  hideModal(){\n    this.setState({\n      modalShow: false\n    })\n  }\n\n  render(){\n    const alwaysVisible = {\n      width: \"3rem\",\n      height: \"3rem\",\n      fontSize: \"1.25em\",\n      borderRadius: \"50%\",\n      position: \"fixed\",\n      bottom: 100,\n      right: 50\n    }\n\n    return(\n    <Fragment>\n      {/* TEXT DISPLAYED WHILE FETCH IS RUNNING */}\n        {this.props.athletes.length === 0 && <h3>Loading athletes...</h3>}\n      {/* DISPLAYNG ATHLETES */}\n      <Accordion>\n        {this.props.athletes.map(athlete => <Athlete info={athlete} key={athlete._id}/>)}\n      </Accordion>\n      <div style={{paddingBottom: '3.5rem'}}></div>\n      {/* BUTTON ALWAYS VISIBLE FOR ADDING NEW ATHLETE */}\n      <Button style={alwaysVisible} onClick={this.showModal}>+</Button>\n      {/* MODAL ADD ATHLETE */}\n        <AddAthleteModal show={this.state.modalShow} onHide={this.hideModal} />\n    </Fragment>\n    )\n\n  }\n}\n\n\n\n","import React, { Component } from 'react'\n\nconst footerStyle = {\n    position : 'fixed',\n    left : 0,\n    bottom : 0,\n    width : '100%',\n    background : '#343a40',\n    color : '#fff',\n    height : '3.5rem',\n    fontSize : '1.25rem',\n    padding : '.75rem 3.175rem'\n}\n\nexport default class Footer extends Component {\n  render(){\n    return(\n      <footer style={footerStyle}>\n          | Footer\n      </footer>\n    )\n  }\n}","import React, { Component, Fragment } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Header from './components/Header.jsx'\nimport Main from './components/Main.jsx'\nimport Footer from './components/Footer.jsx'\n\nconst athletesAPI = 'https://theboxathletes.herokuapp.com/athletes/'\n\n\nexport default class App extends Component {\n\n  constructor(){\n    super()\n    this.state = { athletes: [] }\n  }\n\n  componentDidMount(){\n    fetch(athletesAPI)\n      .then(response => response.json())\n      .then((data) => { this.setState({athletes: data }); console.log(this.state.athletes) },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n            (error) => { console.log(error) }\n            )\n  }\n\n  render(){\n    return(\n      <Fragment>\n        <Header />\n        <Main athletes={this.state.athletes}/>\n        <Footer />\n      </Fragment>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}